import { LLMResponse } from '../outputs/llm-response.js';
import { ReAsk } from '../outputs/reask.js';
import { ValidatorLogs } from '../outputs/validator-logs.js';
export declare class Outputs<T> {
    /**
      * Information from the LLM response.
      */
    private _llmResponseInfo?;
    /**
      * The exact output from the LLM.
      */
    private _rawOutput?;
    /**
      * The output parsed from the LLM response as it was passed into validation.
      */
    private _parsedOutput?;
    /**
      * The output from the validation process.
      */
    private _validationOutput?;
    /**
      * The valid output after validation.
      * Could be only a partial structure if field level reasks occur.
      * Could contain fixed values.
      */
    private _validatedOutput?;
    /**
      * Information from the validation process used to construct a ReAsk to the LLM on validation failure.
      */
    private _reasks?;
    /**
       * The results of each individual validation.
       */
    private _validatorLogs?;
    /**
       * The error message from any exception that raised and interrupted the process.
       */
    private _error?;
    /**
       * The exception that interrupted the process.
       */
    private _exception?;
    /**
       * A subset of validatorLogs for any validations that did not pass.
       */
    private _failedValidations?;
    /**
       * Representation of the end state of the validation run
       * OneOf: pass, fail, error, not run
       */
    private _status?;
    constructor(llmResponseInfo?: LLMResponse, rawOutput?: string, parsedOutput?: T, validationOutput?: ReAsk | T, validatedOutput?: T, reasks?: ReAsk[], validatorLogs?: ValidatorLogs[], error?: string, exception?: Error, failedValidations?: ValidatorLogs[], status?: string);
    static fromPyOutputs<U>(pyOutputs: any): Promise<Outputs<Awaited<U>>>;
    get llmResponseInfo(): LLMResponse | undefined;
    get rawOutput(): string | undefined;
    get parsedOutput(): T | undefined;
    get validationOutput(): ReAsk | T | undefined;
    get validatedOutput(): T | undefined;
    get reasks(): ReAsk[] | undefined;
    get validatorLogs(): ValidatorLogs[] | undefined;
    get error(): string | undefined;
    get exception(): Error | undefined;
    get failedValidations(): ValidatorLogs[] | undefined;
    get status(): string | undefined;
}
//# sourceMappingURL=outputs.d.ts.map