import { determine } from '../utils/determine.js';
import { Inputs } from './inputs.js';
export class CallInputs extends Inputs {
    /**
       * Additional arguments for the LLM as provided by the user.",
       */
    _args;
    /**
       * Additional keyword-arguments for the LLM as provided by the user.
       */
    _kwargs;
    constructor(llmOutput, instructions, prompt, msgHistory, promptParams, numReasks, metadata, fullSchemaReask, args, kwargs) {
        super(llmOutput, instructions, prompt, msgHistory, promptParams, numReasks, metadata, fullSchemaReask);
        this._args = args;
        this._kwargs = kwargs;
    }
    static async fromPyCallInputs(pyCallInputs) {
        let llmOutput, instructions, prompt, msgHistory, promptParams, numReasks, metadata, fullSchemaReask, args, kwargs;
        try {
            llmOutput = await pyCallInputs?.llm_output;
            instructions = await pyCallInputs?.instructions;
            prompt = await pyCallInputs?.prompt;
            msgHistory = await determine(pyCallInputs?.msg_history);
            promptParams = await determine(pyCallInputs?.prompt_params);
            numReasks = await pyCallInputs?.num_reasks;
            metadata = await determine(pyCallInputs?.metadata);
            fullSchemaReask = await determine(pyCallInputs?.full_schema_reask);
            args = await determine(pyCallInputs?.args);
            kwargs = await determine(pyCallInputs?.kwargs);
        }
        catch (error) {
            console.error('An error occurred while parsing CallInputs from python to javascript.', error);
        }
        return new CallInputs(llmOutput, instructions, prompt, msgHistory, promptParams, numReasks, metadata, fullSchemaReask, args, kwargs);
    }
    /**
       * The prompt string as provided by the user.
       */
    get prompt() {
        return this._prompt;
    }
    /**
       * The instructions string as provided by the user.
       */
    get instructions() {
        return this._instructions;
    }
    get args() {
        return this._args;
    }
    get kwargs() {
        return this._kwargs;
    }
}
