import { ReAsk } from '../outputs/reask.js';
import { ValidatorLogs } from '../outputs/validator-logs.js';
import { Stack } from '../structs/stack.js';
import { Inputs } from './inputs.js';
import { Outputs } from './outputs.js';
export declare class Iteration<T> {
    /**
    * The inputs for the iteration/step.
    */
    private _inputs;
    /**
    * The outputs from the iteration/step.
    */
    private _outputs;
    /**
    * Returns the logs from this iteration as a stack.
    */
    private _logs;
    /**
    * Returns the total number of tokens consumed during this iteration.
    */
    private _tokensConsumed?;
    /**
    *  Returns the number of prompt/input tokens consumed during this iteration.
    */
    private _promptTokensConsumed?;
    /**
    * Returns the number of completion/output tokens consumed during this iteration.
    */
    private _completionTokensConsumed?;
    /**
    * The exact output from the LLM.
    */
    private _rawOutput?;
    /**
    * The output from the LLM after undergoing parsing but before validation.
    */
    private _parsedOutput?;
    /**
    * The output from the validation process.
    * Could be a combination of valid output and ReAsks
    */
    private _validationOutput?;
    /**
    * The valid output from the LLM after undergoing validation.
    * Could be only a partial structure if field level reasks occur.
    * Could contain fixed values.
    */
    private _validatedOutput?;
    /**
    * Reasks generated during validation.
    * These would be incorporated into the prompt or the next LLM call.
    */
    private _reasks?;
    /**
    * The results of each individual validation performed on the LLM response during this iteration.
    */
    private _validatorLogs?;
    /**
    * The error message from any exception that raised and interrupted this iteration.
    */
    private _error?;
    /**
    * The exception that interrupted this iteration.
    */
    private _exception?;
    /**
    * The validator logs for any validations that failed during this iteration.
    */
    private _failedValidations?;
    /**
    * Representation of the end state of this iteration.
    * OneOf: pass, fail, error, not run
    */
    private _status?;
    constructor(inputs?: Inputs, outputs?: Outputs<T>, logs?: Stack<string>, tokensConsumed?: number, promptTokensConsumed?: number, completionTokensConsumed?: number, rawOutput?: string, parsedOutput?: T, validationOutput?: T | ReAsk, validatedOutput?: T, reasks?: ReAsk[], validatorLogs?: ValidatorLogs[], error?: string, exception?: Error, failedValidations?: ValidatorLogs[], status?: string);
    static fromPyIteration<U>(pyIteration: any): Promise<Iteration<U>>;
    get inputs(): Inputs | undefined;
    get outputs(): Outputs<T> | undefined;
    get logs(): Stack<string> | undefined;
    get tokensConsumed(): number | undefined;
    get promptTokensConsumed(): number | undefined;
    get completionTokensConsumed(): number | undefined;
    get rawOutput(): string | undefined;
    get parsedOutput(): T | undefined;
    get validationOutput(): T | ReAsk | undefined;
    get validatedOutput(): T | undefined;
    get reasks(): ReAsk[] | undefined;
    get validatorLogs(): ValidatorLogs[] | undefined;
    get error(): string | undefined;
    get exception(): Error | undefined;
    get failedValidations(): ValidatorLogs[] | undefined;
    get status(): string | undefined;
}
//# sourceMappingURL=iteration.d.ts.map