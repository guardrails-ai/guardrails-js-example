import { LLMResponse } from '../outputs/llm-response.js';
import { ReAsk } from '../outputs/reask.js';
import { ValidatorLogs } from '../outputs/validator-logs.js';
import { determine } from '../utils/determine.js';
import { map } from '../utils/map.js';
export class Outputs {
    /**
      * Information from the LLM response.
      */
    _llmResponseInfo;
    /**
      * The exact output from the LLM.
      */
    _rawOutput;
    /**
      * The output parsed from the LLM response as it was passed into validation.
      */
    _parsedOutput;
    /**
      * The output from the validation process.
      */
    _validationOutput;
    /**
      * The valid output after validation.
      * Could be only a partial structure if field level reasks occur.
      * Could contain fixed values.
      */
    _validatedOutput;
    /**
      * Information from the validation process used to construct a ReAsk to the LLM on validation failure.
      */
    _reasks;
    /**
       * The results of each individual validation.
       */
    _validatorLogs;
    /**
       * The error message from any exception that raised and interrupted the process.
       */
    _error;
    /**
       * The exception that interrupted the process.
       */
    _exception;
    /**
       * A subset of validatorLogs for any validations that did not pass.
       */
    _failedValidations;
    /**
       * Representation of the end state of the validation run
       * OneOf: pass, fail, error, not run
       */
    _status;
    constructor(llmResponseInfo, rawOutput, parsedOutput, validationOutput, validatedOutput, reasks, validatorLogs, error, exception, failedValidations, status) {
        this._llmResponseInfo = llmResponseInfo;
        this._rawOutput = rawOutput;
        this._parsedOutput = parsedOutput;
        this._validationOutput = validationOutput;
        this._validatedOutput = validatedOutput;
        this._reasks = reasks;
        this._validatorLogs = validatorLogs;
        this._error = error;
        this._exception = exception;
        this._failedValidations = failedValidations;
        this._status = status;
    }
    static async fromPyOutputs(pyOutputs) {
        let llmResponseInfo, rawOutput, parsedOutput, validationOutput, validatedOutput, reasks, validatorLogs, error, exception, failedValidations, status;
        try {
            const pyLlmResponseInfo = await pyOutputs?.llm_response_info;
            llmResponseInfo = pyLlmResponseInfo && await LLMResponse.fromPyLLMResponse(pyLlmResponseInfo);
            rawOutput = await pyOutputs?.raw_output;
            parsedOutput = await determine(pyOutputs?.parsed_output);
            validationOutput = await determine(pyOutputs?.validation_output, 'validation_output');
            validatedOutput = await determine(pyOutputs?.validated_output);
            const pyReasks = await pyOutputs?.reasks;
            reasks = await map(pyReasks, ReAsk.fromPyReAsk);
            const pyValidatorLogs = await pyOutputs?.validator_logs;
            validatorLogs = await map(pyValidatorLogs, ValidatorLogs.fromPyValidatorLogs);
            error = await pyOutputs?.error;
            exception = await determine(pyOutputs?.exception);
            const pyFailedValidations = await pyOutputs?.failed_validations;
            failedValidations = await map(pyFailedValidations, ValidatorLogs.fromPyValidatorLogs);
            status = await pyOutputs?.status;
        }
        catch (err) {
            console.error('An error occurred while parsing Outputs from python to javascript.', err);
        }
        return new Outputs(llmResponseInfo, rawOutput, parsedOutput, validationOutput, validatedOutput, reasks, validatorLogs, error, exception, failedValidations, status);
    }
    get llmResponseInfo() {
        return this._llmResponseInfo;
    }
    get rawOutput() {
        return this._rawOutput;
    }
    get parsedOutput() {
        return this._parsedOutput;
    }
    get validationOutput() {
        return this._validationOutput;
    }
    get validatedOutput() {
        return this._validatedOutput;
    }
    get reasks() {
        return this._reasks;
    }
    get validatorLogs() {
        return this._validatorLogs;
    }
    get error() {
        return this._error;
    }
    get exception() {
        return this._exception;
    }
    get failedValidations() {
        return this._failedValidations;
    }
    get status() {
        return this._status;
    }
}
