import { Dictionary } from '../types.js';
export declare class Inputs {
    /**
     * The string output from an external LLM call provided by the user via Guard.parse.
     */
    protected _llmOutput?: string;
    /**
     * The instructions for chat model calls.
     */
    protected _instructions?: string;
    /**
     * The prompt.
     */
    protected _prompt?: string;
    /**
     * The message history provided by the user for chat model calls.
     */
    protected _msgHistory?: Dictionary[];
    /**
     * The parameters provided by the user that will be formatted into the final LLM prompt.
     */
    protected _promptParams?: Dictionary;
    /**
     * The total number of reasks allowed; user provided or defaulted.
     */
    protected _numReasks?: number;
    /**
     * The metadata provided by the user to be used during validation.
     */
    protected _metadata?: Dictionary;
    /**
     * Whether to perform reasks across the entire schema or at the field level.
     */
    protected _fullSchemaReask?: boolean;
    constructor(llmOutput?: string, instructions?: string, prompt?: string, msgHistory?: Dictionary[], promptParams?: Dictionary, numReasks?: number, metadata?: Dictionary, fullSchemaReask?: boolean);
    static fromPyInputs(pyInputs: any): Promise<Inputs>;
    get llmOutput(): string | undefined;
    get instructions(): string | undefined;
    get prompt(): string | undefined;
    get msgHistory(): Dictionary[] | undefined;
    get promptParams(): Dictionary | undefined;
    get numReasks(): number | undefined;
    get metadata(): Dictionary | undefined;
    get fullSchemaReask(): boolean | undefined;
}
//# sourceMappingURL=inputs.d.ts.map