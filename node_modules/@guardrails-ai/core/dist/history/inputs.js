import { determine } from '../utils/determine.js';
export class Inputs {
    /**
     * The string output from an external LLM call provided by the user via Guard.parse.
     */
    _llmOutput;
    /**
     * The instructions for chat model calls.
     */
    _instructions;
    /**
     * The prompt.
     */
    _prompt;
    /**
     * The message history provided by the user for chat model calls.
     */
    _msgHistory;
    /**
     * The parameters provided by the user that will be formatted into the final LLM prompt.
     */
    _promptParams;
    /**
     * The total number of reasks allowed; user provided or defaulted.
     */
    _numReasks;
    /**
     * The metadata provided by the user to be used during validation.
     */
    _metadata;
    /**
     * Whether to perform reasks across the entire schema or at the field level.
     */
    _fullSchemaReask;
    constructor(llmOutput, instructions, prompt, msgHistory, promptParams, numReasks, metadata, fullSchemaReask) {
        this._llmOutput = llmOutput;
        this._instructions = instructions;
        this._prompt = prompt;
        this._msgHistory = msgHistory;
        this._promptParams = promptParams;
        this._numReasks = numReasks;
        this._metadata = metadata;
        this._fullSchemaReask = fullSchemaReask;
    }
    static async fromPyInputs(pyInputs) {
        let llmOutput, instructions, prompt, msgHistory, promptParams, numReasks, metadata, fullSchemaReask;
        try {
            llmOutput = await pyInputs?.llm_output;
            instructions = await pyInputs?.instructions;
            prompt = await pyInputs?.prompt;
            msgHistory = await determine(pyInputs?.msg_history);
            promptParams = await determine(pyInputs?.prompt_params);
            numReasks = await determine(pyInputs?.num_reasks);
            metadata = await determine(pyInputs?.metadata);
            fullSchemaReask = await determine(pyInputs?.full_schema_reask);
        }
        catch (error) {
            console.error('An error occurred while parsing Inputs from python to javascript.', error);
        }
        return new Inputs(llmOutput, instructions, prompt, msgHistory, promptParams, numReasks, metadata, fullSchemaReask);
    }
    get llmOutput() {
        return this._llmOutput;
    }
    get instructions() {
        return this._instructions;
    }
    get prompt() {
        return this._prompt;
    }
    get msgHistory() {
        return this._msgHistory;
    }
    get promptParams() {
        return this._promptParams;
    }
    get numReasks() {
        return this._numReasks;
    }
    get metadata() {
        return this._metadata;
    }
    get fullSchemaReask() {
        return this._fullSchemaReask;
    }
}
